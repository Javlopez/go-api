# .github/workflows/deploy.yml
name: Deploy to Production

on:
  workflow_run:
    workflows: ["Build API and Migrations"]
    branches: [main]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}


    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_SSLMODE=${{ secrets.DB_SSLMODE }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "GIN_MODE=release" >> .env

      - name: Generate docker-compose.production.yml
        run: |
          cat > docker-compose.production.yml << EOF
          version: '3.8'
          
          services:
            postgres:
              image: postgres:16-alpine
              container_name: trade-api-postgres
              environment:
                POSTGRES_USER: \${DB_USER}
                POSTGRES_PASSWORD: \${DB_PASSWORD}
                POSTGRES_DB: \${DB_NAME}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - trade-api-network
              restart: always
          
            migrate:
              image: jlopez/go-api-migrate:${{ github.ref_name }}
              environment:
                - DB_HOST=postgres
                - DB_PORT=\${DB_PORT}
                - DB_USER=\${DB_USER}
                - DB_PASSWORD=\${DB_PASSWORD}
                - DB_NAME=\${DB_NAME}
                - DB_SSLMODE=\${DB_SSLMODE}
              depends_on:
                - postgres
              networks:
                - trade-api-network
              restart: on-failure
          
            api:
              image: jlopez/go-api:${{ github.ref_name }}
              environment:
                - PORT=\${PORT}
                - DB_HOST=postgres
                - DB_PORT=\${DB_PORT}
                - DB_USER=\${DB_USER}
                - DB_PASSWORD=\${DB_PASSWORD}
                - DB_NAME=\${DB_NAME}
                - DB_SSLMODE=\${DB_SSLMODE}
                - GIN_MODE=release
              ports:
                - "\${PORT}:\${PORT}"
              depends_on:
                - postgres
                - migrate
              networks:
                - trade-api-network
              restart: always
          
          networks:
            trade-api-network:
              driver: bridge
          
          volumes:
            postgres_data:
          EOF

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.production.yml,.env"
          target: "~/trade-api"
          strip_components: 0

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
        # key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/trade-api
            docker-compose -f docker-compose.production.yml pull
            docker-compose -f docker-compose.production.yml down --remove-orphans
            docker-compose -f docker-compose.production.yml up -d