# docker-compose.yml
services:
  postgres:  # Service name is "postgres"
    image: postgres:16-alpine
    container_name: go-api-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: trade_orders
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - go-api-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Migrate Service (runs migrations and exits)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-api-migrate
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=trade_orders
      - DB_SSLMODE=disable
    volumes:
      - ./:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - go-api-network
    command: go run cmd/migrate/main.go
    profiles: ["migrate"]

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-api-service
    environment:
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=trade_orders
      - DB_SSLMODE=disable
      - GIN_MODE=debug
    ports:
      - "8080:8080"
    volumes:
      - ./:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - go-api-network
    command: /go/bin/air -c .air.toml

networks:
  go-api-network:
    driver: bridge

volumes:
  postgres_data: